openapi: 3.0.3 

info:
  title: WASAText
  description: |-
    This OpenAPI document describes how WASAText works.
  version: "1"
  contact:
    name: Tommaso Salvi
    email: salvi.1960045@studenti.uniroma1.it

tags:
  - name: login
    description: Handle login actions
  - name: users
    description: Handle user actions
  - name: conversations
    description: Handle conversation actions
  - name: messages
    description: Handle message actions
  - name: groups
    description: Handle group actions

servers: 
  - url: http://localhost:3000

components:
  securitySchemes:
    bearerAuth: 
      type: http
      scheme: bearer
  schemas:
    Name:
      type: string
      description: "The name of the user, which must be between 3 and 16 characters."
      pattern: '^.{3,16}$'
      minLength: 3
      maxLength: 16
    Error500:
      type: object
      description: "Schema for a server error (500)."
      properties:
        error:
          type: string
          description: "The code of the error"
          pattern: "^[a-zA-Z0-9 .,!?'-]+$"
          minLength: 3
          maxLength: 1000
    Error401:
      type: object
      description: "Schema for unauthorized access (401)."
      properties:
        error:
          type: string
          description: "The code of the error"
          pattern: "^[a-zA-Z0-9 .,!?'-]+$"
          minLength: 3
          maxLength: 1000
    Error403:
      type: object
      description: "Schema for forbidden access (403)."
      properties:
        error:
          type: string
          description: "The code of the error"
          pattern: "^[a-zA-Z0-9 .,!?'-]+$"
          minLength: 3
          maxLength: 1000
    Status:
      type: string
      description: Represents the status of the operation.
      enum: ["unsent", "sent", "read", "uploaded", "updated"]
      pattern: "^[a-zA-Z0-9 .,!?'-]+$"
      minLength: 3
      maxLength: 1000
  
security:
  - bearerAuth: []

paths: 
  # -------------------------------------------------------
  # LOGIN
  # -------------------------------------------------------
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user 
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details 
        required: true
        content:
          application/json: 
            schema:
              type: object 
              required:
                - Nickname
              description: Schema for user login details.
              properties:
                Nickname:
                  $ref: '#/components/schemas/Name'
      responses:
        '201':
          description: User log-in action successful 
          content:
            application/json: 
              schema:
                type: object 
                description: Schema for a successful log-in response.
                properties:
                  User_id: 
                    type: integer
                    description: "A unique identifier for the user"
                    minimum: 1
                    maximum: 100000
                  Nickname:
                    $ref: '#/components/schemas/Name'
        '400':
          description: Invalid nickname length
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'


  # -------------------------------------------------------
  # USERS
  # -------------------------------------------------------
  /users/{User_id}:
    put: 
      tags: ["users"]
      summary: Update the nickname
      description: Allows users to update their nickname
      operationId: setMyUserName
      parameters:
        - name: User_id
          in: path
          required: true
          description: "The unique identifier of the user"
          schema:
            type: integer
            description: "The unique identifier of the user whose nickname is being updated"
            minimum: 1
            maximum: 100000
      requestBody: 
        required: true
        description: "Update Nickname"
        content:
          application/json:
            schema:
              type: object
              required:
                - Nickname
              description: Schema for updating the user's nickname.
              properties:
                Nickname:
                  $ref: '#/components/schemas/Name'
      responses:
        '200':
          description: Nickname successfully updated
          content:
            application/json:
              schema:
                type: object
                description: Schema for a successful nickname update response.
                properties:
                  success:
                    type: boolean
                    description: "The Nickname is successfully updated if boolean = true"
                  message: 
                    type: string
                    description: "The message which confirm the update"
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '400':
          description: Invalid Nickname format or length
          content:
            application/json:
              schema:
                type: object
                description: Schema for a bad request due to invalid Nickname details.
                properties:
                  error:
                    type: string
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    description: "The code of the error"
                    minLength: 3
                    maxLength: 16
        '401':
          description: Unauthorized action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'


  # -------------------------------------------------------
  # CONVERSATIONS
  # -------------------------------------------------------
  /conversations:
    get:
      tags: ["conversations"]
      summary: Get all conversations
      description: Return all my conversations
      operationId: getMyConversations
      parameters:
        - name: sortBy
          in: query
          description: Sort conversations by a specified field (ex. date)
          required: false
          schema:
            type: string
            pattern: "^[a-zA-Z0-9 .,!?'-]+$"
            minLength: 3
            maxLength: 10
            enum: [date]
      responses:
        '200':
          description: Conversations successfully returned
          content:
            application/json:
              schema:
                type: object
                description: The response schema for a successful retrieval of conversations.
                required: 
                  - conversations
                properties:
                  conversations:
                    type: array
                    description: A list of conversations belonging to the user.
                    minItems: 1
                    maxItems: 1000
                    items:
                      type: object
                      description: Schema for an individual conversation object.
                      required:
                        - Conversation_id
                        - title
                        - lastMessage
                        - updatedAt
                        - status
                      properties:
                        Conversation_id:
                          type: integer
                          description: The unique identifier for the conversation.
                          minimum: 1
                          maximum: 100000
                        title:
                          type: string
                          description: The title or name of the conversation.
                          pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                          minLength: 3
                          maxLength: 1000
                        lastMessage:
                          type: string
                          description: The content of the most recent message in the conversation.
                          pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                          minLength: 3
                          maxLength: 1000
                        updatedAt:
                          type: string
                          description: The timestamp of the last activity in the conversation.
                          format: date-time
                          pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                          minLength: 3
                          maxLength: 1000
                        status:
                          $ref: '#/components/schemas/Status'
                  totalCount:
                    type: integer
                    description: The total number of conversations.
                    minimum: 0
                    maximum: 100000

  /conversations/{Conversation_id}:
    get:
      tags: ["conversations"]
      summary: Get a conversation by its ID
      description: Return one specific conversation
      operationId: getConversation
      parameters:
        - name: Conversation_id
          in: path
          description: The unique identifier of the conversation to retrieve.
          required: true
          schema:
            type: integer
            description: "Schema for having a specific conversation"
            minimum: 1
            maximum: 100000
      responses:
        '200':
          description: Conversation successfully returned
          content:
            application/json:
              schema:
                type: object
                description: The schema for the conversation details response.
                required:
                  - Conversation_id
                  - title
                  - lastMessage
                  - updatedAt
                  - status
                properties:
                  Conversation_id:
                    type: integer
                    description: The unique identifier for the conversation.
                    minimum: 1
                    maximum: 100000
                  title:
                    type: string
                    description: The title or name of the conversation.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
                  lastMessage:
                    type: string
                    description: The content of the most recent message in the conversation.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
                  updatedAt:
                    type: string
                    description: The timestamp of the last activity in the conversation.
                    format: date-time
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
                  status:
                    type: string
                    description: "The status of the conversation: 'read' or 'unread'."
                    enum: ["read", "unread"]
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'


  # -------------------------------------------------------
  # MESSAGES
  # -------------------------------------------------------
  /messages:
    post:
      tags: ["messages"]
      summary: Send a message
      description: Allows to send a message to a specific recipient
      operationId: sendMessage
      requestBody:
        description: Message details required to send a message.
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Schema for the request to send a message.
              required:
                - Recipient_id
                - messageContent
              properties:
                Recipient_id:
                  type: integer
                  description: "The unique identifier of the recipient."
                  minimum: 1
                  maximum: 100000
                messageContent:
                  type: string
                  description: "The content of the message (<= 500 chars)."
                  pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                  minLength: 1
                  maxLength: 1000
                timestamp:
                  type: string
                  format: date-time
                  description: "Optional timestamp. If omitted, server will set current time."
                  pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                  minLength: 3
                  maxLength: 1000
      responses:
        '201':
          description: Message sent successfully.
          content:
            application/json:
              schema:
                type: object
                description: Response structure for a successfully sent message.
                required:
                  - Message_id
                  - status
                properties:
                  Message_id:
                    type: integer
                    description: "The unique identifier assigned to the message."
                    minimum: 1
                    maximum: 100000
                  status:
                    type: string
                    description: "The current status of the message (unsent, sent, read)."
                    enum: ["unsent", "sent", "read"]
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 10
        '400':
          description: Invalid message details.
          content:
            application/json:
              schema:
                type: object
                description: Schema for validation errors.
                properties:
                  error:
                    type: string
                    description: Description of the validation error.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'


  /messages/{Message_id}/forwards:
    post:
      tags: ["messages"]
      summary: Forward a message
      description: Forward a message to a specific recipient
      operationId: forwardMessage
      parameters:
        - name: Message_id
          in: path
          required: true
          description: "The unique ID of the original message"
          schema:
            type: integer
            minimum: 1
            maximum: 100000
      requestBody:
        description: Details for forwarding the message.
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Schema for the request to forward a message.
              required:
                - Recipient_id
              properties:
                Recipient_id:
                  type: integer
                  description: "The unique identifier of the recipient."
                  minimum: 1
                  maximum: 100000
                messageContent:
                  type: string
                  description: "Optional new content; if omitted, original content is used."
                  pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                  minLength: 1
                  maxLength: 1000
                timestamp:
                  type: string
                  format: date-time
                  description: "When forwarded. If not provided, server sets current time."
                  pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                  minLength: 3
                  maxLength: 1000
      responses:
        '201':
          description: Message forwarded successfully.
          content:
            application/json:
              schema:
                type: object
                description: Response structure for a successfully forwarded message.
                required:
                  - Message_id
                  - status
                properties:
                  Message_id:
                    type: integer
                    minimum: 1
                    maximum: 100000
                    description: "The new forwarded message ID."
                  status:
                    type: string
                    description: "Status of the forwarded message (unsent, sent, read)."
                    enum: ["unsent", "sent", "read"]
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 10
        '400':
          description: Invalid input or missing required fields.
          content:
            application/json:
              schema:
                description: Schema for validation errors.
                type: object
                properties:
                  error:
                    type: string
                    description: "Validation error details."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '404':
          description: Message not found.
          content:
            application/json:
              schema:
                type: object
                description: Schema for resource not found errors.
                properties:
                  error:
                    type: string
                    description: "Original message ID not found."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'


  # Reactions come sottorisorsa
  /messages/{Message_id}/reactions:
    post:
      tags: ["messages"]
      summary: Add a reaction
      description: Adds a reaction to a specific message.
      operationId: commentMessage
      parameters:
        - name: Message_id
          in: path
          required: true
          description: "ID of the message to which the reaction will be added."
          schema:
            type: integer
            minimum: 1
            maximum: 100000
      requestBody:
        description: Details of the reaction to add.
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Schema for adding a reaction to a message.
              required:
                - emoji
              properties:
                emoji:
                  type: string
                  description: "The emoji or symbol representing the reaction."
                  pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                  minLength: 1
                  maxLength: 1000
      responses:
        '201':
          description: Reaction added successfully.
          content:
            application/json:
              schema:
                description: Response structure for a successful reaction addition.
                type: object
                required:
                  - Reaction_id
                  - status
                properties:
                  Reaction_id:
                    type: integer
                    description: "Unique identifier of the added reaction."
                    minimum: 1
                    maximum: 100000
                  status:
                    $ref: '#/components/schemas/Status'
        '400':
          description: Invalid data provided.
          content:
            application/json:
              schema:
                type: object
                description: Schema for validation errors.
                properties:
                  error:
                    type: string
                    description: "Validation error details (e.g. invalid emoji)."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '404':
          description: Message not found.
          content:
            application/json:
              schema:
                type: object
                description: Schema for resource not found errors.
                properties:
                  error:
                    type: string
                    description: "The specified message ID does not exist."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

    delete:
      tags: ["messages"]
      summary: Remove a reaction (or all reactions)
      description: Removes a reaction from a specific message. If the request body is empty or not provided, remove all reactions.
      operationId: uncommentMessage
      parameters:
        - name: Message_id
          in: path
          required: true
          description: "ID of the message from which the reaction will be removed."
          schema:
            type: integer
            minimum: 1
            maximum: 100000
      responses:
        '200':
          description: Reaction removed successfully.
          content:
            application/json:
              schema:
                type: object
                description: Response structure for a successful reaction removal.
                required:
                  - Reaction_id
                  - status
                properties:
                  Reaction_id:
                    type: integer
                    minimum: 1
                    maximum: 100000
                    description: "The unique identifier of the removed reaction."
                  status:
                    $ref: '#/components/schemas/Status'
        '400':
          description: Invalid data provided.
          content:
            application/json:
              schema:
                type: object
                description: Response for an error caused by invalid data.
                properties:
                  error:
                    type: string
                    description: "Validation error details."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '404':
          description: Message or reaction not found.
          content:
            application/json:
              schema:
                type: object
                description: Response for an error caused by message not found.
                properties:
                  error:
                    type: string
                    description: "Specified message or reaction does not exist."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'


  /messages/{Message_id}:
    delete:
      tags: ["messages"]
      summary: Delete a message
      description: Delete a specific message
      operationId: deleteMessage
      parameters:
        - name: Message_id
          in: path
          required: true
          description: "The unique identifier of the message to be deleted."
          schema:
            type: integer
            minimum: 1
            maximum: 100000
      responses:
        '204':
          description: Message deleted successfully.
          content:
            application/json:
              schema:
                type: object
                description: Confirmation that the message has been deleted.
                properties:
                  success:
                    type: boolean
                    description: "Indicates that the operation was successful."
                  message:
                    type: string
                    description: "Descriptive confirmation of the deletion."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '400':
          description: Invalid request. The provided `Message_id` is malformed or missing.
          content:
            application/json:
              schema:
                type: object
                description: Rejection of deleting a message.
                properties:
                  error:
                    type: string
                    description: "Error message explaining the invalid data."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '404':
          description: Message not found.
          content:
            application/json:
              schema:
                type: object
                description: Rejection of deleting a message caused by not found
                properties:
                  error:
                    type: string
                    description: "The specified Message_id does not exist."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'


  # -------------------------------------------------------
  # GROUPS
  # -------------------------------------------------------
  /groups/{Group_id}/users:
    post:
      tags: ["groups"]
      summary: Add a user to a group
      description: Assigns a user to a specific group.
      operationId: addToGroup
      parameters:
        - name: Group_id
          description: The integer that describes the Group_id.
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 100000
            description: "The ID of the group"
      requestBody:
        description: Details of the user to add, including role.
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Response structured with details of User_id and role
              required:
                - User_id
                - role
              properties:
                User_id:
                  type: integer
                  description: "ID of the user to add to the group"
                  minimum: 1
                  maximum: 100000
                role:
                  type: string
                  description: "The role assigned to the user (e.g., 'member', 'admin')."
                  pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                  minLength: 3
                  maxLength: 1000
      responses:
        '201':
          description: User successfully added to the group.
          content:
            application/json:
              schema:
                type: object
                description: Schema for positive response
                required:
                  - Group_id
                  - User_id
                  - role
                properties:
                  Group_id:
                    type: integer
                    description: "The ID of the group."
                    minimum: 1
                    maximum: 100000
                  User_id:
                    type: integer
                    description: "The ID of the user added."
                    minimum: 1
                    maximum: 100000
                  role:
                    type: string
                    description: "The role assigned to the user."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '400':
          description: Invalid data (Group_id, User_id, or role).
          content:
            application/json:
              schema:
                type: object
                description: Negative response at the request.
                properties:
                  error:
                    type: string
                    description: "Details of the invalid request."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '404':
          description: Group or user not found.
          content:
            application/json:
              schema:
                type: object
                description: Negative response caused by not found
                properties:
                  error:
                    type: string
                    description: "The specified group or user does not exist."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

  /groups/{Group_id}/users/{User_id}:
    delete:
      tags: ["groups"]
      summary: Remove a user from a group
      description: Allows a specific user to leave (be removed from) a group.
      operationId: leaveGroup
      parameters:
        - name: Group_id
          description: Integer that represent the Group_id
          in: path
          required: true
          schema:
            type: integer
            description: "The ID of the group."
            minimum: 1
            maximum: 100000
        - name: User_id
          description: Integer that represent the User_id
          in: path
          required: true
          schema:
            type: integer
            description: "The ID of the user to remove."
            minimum: 1
            maximum: 100000
      responses:
        '200':
          description: User successfully removed from the group.
          content:
            application/json:
              schema:
                type: object
                description: Schema for positive removal of a user.
                required:
                  - success
                  - message
                properties:
                  success:
                    type: boolean
                    description: "Indicates the operation was successful."
                    example: true
                  message:
                    type: string
                    description: "A confirmation message."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '400':
          description: Invalid data (Group_id or User_id).
          content:
            application/json:
              schema:
                type: object
                description: Schema for invalid data.
                properties:
                  error:
                    type: string
                    description: "Details of the error."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '404':
          description: Group or user not found.
          content:
            application/json:
              schema:
                type: object
                description: Schema for error caused by not found.
                properties:
                  error:
                    type: string
                    description: "Group or user not found."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'


  /groups/{Group_id}:
    patch:
      tags: ["groups"]
      summary: Update group details
      description: Allows updating certain group fields (like the group name).
      operationId: setGroupName
      parameters:
        - name: Group_id
          in: path
          description: Integer that represents Group_id
          required: true
          schema:
            type: integer
            description: "The unique ID of the group."
            minimum: 1
            maximum: 100000
      requestBody:
        description: The new name for the group.
        required: true
        content:
          application/json-patch+json:
            schema:
              type: object
              required:
                - groupName
              description: "Schema for renaming a group"
              properties:
                groupName:
                  type: string
                  description: "New group name."
                  pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                  minLength: 3
                  maxLength: 1000
      responses:
        '200':
          description: Group name updated successfully.
          content:
            application/json:
              schema:
                type: object
                description: Schema for positive name update.
                required:
                  - Group_id
                  - groupName
                properties:
                  Group_id:
                    type: integer
                    description: "The unique ID of the group."
                    minimum: 1
                    maximum: 100000
                  groupName:
                    type: string
                    description: "The updated name of the group."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '400':
          description: Invalid group name or Group_id provided.
          content:
            application/json:
              schema:
                type: object
                description: Schema for negative response caused by invalid Group_id
                properties:
                  error:
                    type: string
                    description: "Error details."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '404':
          description: Group not found.
          content:
            application/json:
              schema:
                type: object
                description: Schema for error caused by not found.
                properties:
                  error:
                    type: string
                    description: "The specified group does not exist."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Internal server error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'


  # -------------------------------------------------------
  # PHOTOS (USERS)
  # -------------------------------------------------------
  /photos/{User_id}:
    put:
      tags: ["users"]
      summary: Create or update the user's profile photo
      description: Upsert a single profile photo for the user.
      operationId: setMyPhoto
      parameters:
        - name: User_id
          description: Integer that represents User_id.
          in: path
          required: true
          schema:
            type: integer
            description: "The unique ID of the user."
            minimum: 1
            maximum: 100000
      requestBody:
        description: The photo to be uploaded or updated.
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              description: Schema for positive photo update or upload.
              required: [photo]
              properties:
                photo:
                  type: string
                  format: binary
                  description: "The image file for the user's profile photo."
                  pattern: "^[01]+$"
                  minLength: 1
                  maxLength: 1000
      responses:
        '200':
          description: Profile photo updated successfully.
          content:
            application/json:
              schema:
                type: object
                description: Schema for positive photo update
                required:
                  - status
                  - photoUrl
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  photoUrl:
                    type: string
                    description: "URL or path of the updated photo."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '201':
          description: Profile photo created successfully
          content:
            application/json:
              schema:
                type: object
                description: Schema for positive photo creation.
                required:
                  - status
                  - photoUrl
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  photoUrl:
                    type: string
                    description: "URL or path of the created photo."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '400':
          description: Invalid file upload or unsupported format.
          content:
            application/json:
              schema:
                type: object
                description: Schema for negative response caused by invalid file
                properties:
                  error:
                    type: string
                    description: "What went wrong with the file upload."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '415':
          description: Unsupported media type.
          content:
            application/json:
              schema:
                type: object
                description: Schema for error caused by unsupported media type
                properties:
                  error:
                    type: string
                    description: "The uploaded file type is not supported."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'


  # -------------------------------------------------------
  # GROUP PHOTO
  # -------------------------------------------------------
  /groups/{Group_id}/photo:
    put:
      tags: ["groups"]
      summary: Create or update the group photo
      description: Allows the group admin to upload or update the photo for a specific group.
      operationId: setGroupPhoto
      parameters:
        - name: Group_id
          description: Integer that represents Group_id
          in: path
          required: true
          schema:
            type: integer
            description: "The unique ID of the group."
            minimum: 1
            maximum: 100000
      requestBody:
        description: Group photo file upload
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              description: Schema that takes photo.
              required: [ photo ]
              properties:
                photo:
                  type: string
                  format: binary
                  description: "The image file to be uploaded as the group photo."
                  pattern: "^[01]+$"
                  minLength: 1
                  maxLength: 1000
      responses:
        '200':
          description: Group photo updated successfully.
          content:
            application/json:
              schema:
                type: object
                description: Schema for positive photo updated.
                required:
                  - status
                  - photoUrl
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  photoUrl:
                    type: string
                    description: "The URL or path to the updated photo."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '201':
          description: Group photo created successfully.
          content:
            application/json:
              schema:
                type: object
                description: Schema for positive photo created.
                required:
                  - status
                  - photoUrl
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  photoUrl:
                    type: string
                    description: "The URL or path to the newly uploaded photo."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '400':
          description: Invalid file upload or unsupported format.
          content:
            application/json:
              schema:
                type: object
                description: Schema for error caused by invalid file 
                properties:
                  error:
                    type: string
                    description: "Error details for the file upload."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '403':
          description: Unauthorized - user lacks permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        '415':
          description: Unsupported media type.
          content:
            application/json:
              schema:
                type: object
                description: Schema for error caused by unsupported media type.
                properties:
                  error:
                    type: string
                    description: "The uploaded file type is not supported."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'


  # -------------------------------------------------------
  # PERMISSIONS
  # -------------------------------------------------------
  /permissions/users/{User_id}:
    post:
      tags: ["users"]
      summary: Check user permissions
      description: Verifies if a user has the necessary permissions to perform a specific action.
      operationId: checkUserPermissions
      parameters:
        - name: User_id
          description: Integer that represents User_id
          in: path
          required: true
          schema:
            type: integer
            description: "The unique ID of the user."
            minimum: 1
            maximum: 100000
      requestBody:
        description: The action for which permission needs to be checked.
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Schema for positive response of authorization
              required:
                - action
              properties:
                action:
                  type: string
                  description: "Action to verify (e.g., 'setGroupPhoto')."
                  pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                  minLength: 3
                  maxLength: 1000
      responses:
        '200':
          description: Permission status verified successfully.
          content:
            application/json:
              schema:
                type: object
                description: Schema for positive status verification
                required:
                  - allowed
                  - message
                properties:
                  allowed:
                    type: boolean
                    description: "If true, user is authorized to perform the action."
                    example: true
                  message:
                    type: string
                    description: "Additional info about the permission status."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '403':
          description: Unauthorized action - user lacks the required permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        '400':
          description: Bad request - invalid input data.
          content:
            application/json:
              schema:
                type: object
                description: Schema for negative response caused by invalid input data
                properties:
                  error:
                    type: string
                    description: "Details about invalid request data."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'