openapi: 3.0.3 

info:
  title: WASAText
  description: |-
    This OpenAPI document describes how WASAText works.
  version: "1"
  contact:
    name: Tommaso Salvi
    email: salvi.1960045@studenti.uniroma1.it

tags:
  - name: login
    description: Handle login actions
  - name: users
    description: Handle user actions
  - name: conversations
    description: Handle conversation actions
  - name: messages
    description: Handle message actions
  - name: groups
    description: Handle group actions

servers: 
  - url: http://localhost:3000

components:
  securitySchemes:
    bearerAuth: 
      type: http
      scheme: bearer
  schemas:
    Name:
      type: string
      description: "The name of the user, which must be between 3 and 16 characters."
      pattern: '^.{3,16}$'
      minLength: 3
      maxLength: 16
    Error500:
      type: object
      description: "Schema for a server error (500)."
      properties:
        error:
          type: string
          description: "The code of the error"
          pattern: "^[a-zA-Z0-9 .,!?'-]+$"
          minLength: 3
          maxLength: 1000
    Error401:
      type: object
      description: "Schema for unauthorized access (401)."
      properties:
        error:
          type: string
          description: "The code of the error"
          pattern: "^[a-zA-Z0-9 .,!?'-]+$"
          minLength: 3
          maxLength: 1000
    Error403:
      type: object
      description: "Schema for forbidden access (403)."
      properties:
        error:
          type: string
          description: "The code of the error"
          pattern: "^[a-zA-Z0-9 .,!?'-]+$"
          minLength: 3
          maxLength: 1000
    Status:
      type: string
      description: Represents the status of the operation.
      enum: ["unsent", "sent", "read", "uploaded", "updated"]
      pattern: "^[a-zA-Z0-9 .,!?'-]+$"
      minLength: 3
      maxLength: 1000
  
security:
  - bearerAuth: []

paths: 
  # -------------------------------------------------------
  # LOGIN
  # -------------------------------------------------------
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user 
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details 
        required: true
        content:
          application/json: 
            schema:
              type: object 
              required:
                - Nickname
              description: Schema for user login details.
              properties:
                Nickname:
                  $ref: '#/components/schemas/Name'
      responses:
        '201':
          description: User created successfully
          content:
            application/json: 
              schema:
                type: object 
                description: Schema for a successful log-in response.
                properties:
                  User_id: 
                    type: integer
                    description: "A unique identifier for the user"
                    minimum: 1
                    maximum: 1000
                  Nickname:
                    $ref: '#/components/schemas/Name'
        '200':
          description: User already exists and has logged in successfully
          content:
            application/json: 
              schema:
                type: object 
                description: Schema for an existing user's log-in response.
                properties:
                  User_id: 
                    type: integer
                    description: "A unique identifier for the user."
                    minimum: 1
                    maximum: 1000
                  Nickname:
                    $ref: '#/components/schemas/Name'                    
        '400':
          description: Invalid nickname length
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'


  # -------------------------------------------------------
  # USERS
  # -------------------------------------------------------
  /users/online:
    get:
      tags: ["users"]
      summary: Ottieni la lista degli utenti
      description: Restituisce un elenco di utenti 
      operationId: getUsers
      responses:
        "200":
          description: Lista degli utenti recuperata con successo.
          content:
            application/json:
              schema:
                type: array
                description: Schema for successfull return of list
                minItems: 1
                maxItems: 1000
                items:
                  type: object
                  properties:
                    user_id:
                      type: integer
                      description: ID univoco dell'utente.
                      minimum: 1
                      maximum: 1000
                    nickname:
                      type: string
                      description: Il nome utente dell'utente
                      pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                      minLength: 3
                      maxLength: 1000
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

  /users/{User_id}:
    put: 
      tags: ["users"]
      summary: Update the nickname
      description: Allows users to update their nickname
      operationId: setMyUserName
      parameters:
        - name: User_id
          in: path
          required: true
          description: "The unique identifier of the user"
          schema:
            type: integer
            description: "The unique identifier of the user whose nickname is being updated"
            minimum: 1
            maximum: 1000
      requestBody: 
        required: true
        description: "Update Nickname"
        content:
          application/json:
            schema:
              type: object
              required:
                - Nickname
              description: Schema for updating the user's nickname.
              properties:
                Nickname:
                  $ref: '#/components/schemas/Name'
      responses:
        '200':
          description: Nickname successfully updated
          content:
            application/json:
              schema:
                type: object
                description: Schema for a successful nickname update response.
                properties:
                  success:
                    type: boolean
                    description: "The Nickname is successfully updated if boolean = true"
                  message: 
                    type: string
                    description: "The message which confirm the update"
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '400':
          description: Invalid Nickname format or length
          content:
            application/json:
              schema:
                type: object
                description: Schema for a bad request due to invalid Nickname details.
                properties:
                  error:
                    type: string
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    description: "The code of the error"
                    minLength: 3
                    maxLength: 16
        '401':
          description: Unauthorized action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

  /users/{User_id}/photo:
    put:
      tags: ["users"]
      summary: Create or update the user's profile photo
      description: Upsert a single profile photo for the user.
      operationId: setMyPhoto
      parameters:
        - name: User_id
          description: Integer that represents User_id.
          in: path
          required: true
          schema:
            type: integer
            description: "The unique ID of the user."
            minimum: 1
            maximum: 1000
      requestBody:
        description: The photo to be uploaded or updated.
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              description: Schema for positive photo update or upload.
              required: [photo]
              properties:
                photo:
                  type: string
                  format: binary
                  description: "The image file for the user's profile photo."
                  pattern: "^[01]+$"
                  minLength: 1
                  maxLength: 100
      responses:
        '200':
          description: Profile photo updated successfully.
          content:
            application/json:
              schema:
                type: object
                description: Schema for positive photo update
                required:
                  - status
                  - photoUrl
                properties:
                  status:
                    type: string
                    description: "Indicates the operation was successful."
                    enum: ["success"]
                  photoUrl:
                    type: string
                    description: "URL or path of the updated photo."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '400':
          description: Invalid input or bad request.
          content:
            application/json:
              schema:
                type: object
                description: Schema for negative response caused by invalid input.
                properties:
                  error:
                    type: string
                    description: "Error details, e.g., invalid User_id or invalid body."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '401':
          description: Unauthorized access due to mismatched User_id.
          content:
            application/json:
              schema:
                type: object
                description: Schema for unauthorized access.
                properties:
                  error:
                    type: string
                    description: "Details of unauthorized access."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '403':
          description: Forbidden access due to missing or invalid token.
          content:
            application/json:
              schema:
                type: object
                description: Schema for forbidden access.
                properties:
                  error:
                    type: string
                    description: "Details of the missing or invalid token."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '415':
          description: Unsupported media type.
          content:
            application/json:
              schema:
                type: object
                description: Schema for unsupported media type errors.
                properties:
                  error:
                    type: string
                    description: "The uploaded file type is not supported."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Internal server error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

    get:
      summary: Recupera la foto profilo di un utente
      operationId: getPhoto
      description: Restituisce l'immagine profilo di un utente come BLOB dal database.
      tags: ["users"]
      parameters:
        - name: User_id
          in: path
          required: true
          description: The integer that represents the user_id
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            description: ID dell'utente di cui recuperare la foto
      responses:
        "200":
          description: Foto profilo restituita con successo
          content:
            image/png:
              schema:
                type: string
                description: "Photo succesfully returned"
                pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                minLength: 3
                maxLength: 1000
        '400':
          description: Invalid input or bad request.
          content:
            application/json:
              schema:
                type: object
                description: Schema for negative response caused by invalid input.
                properties:
                  error:
                    type: string
                    description: "Error details, e.g., invalid User_id or invalid body."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        "404":
          description: User doesn't have a photo.
          content:
            application/json:
              schema:
                type: object
                description: Schema for negative response caused by unexisting photo.
                properties:
                  error:
                    type: string
                    description: "Error details, e.g., invalid User_id or invalid body."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Internal server error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'


  # -------------------------------------------------------
  # CONVERSATIONS
  # -------------------------------------------------------
  /conversations:
    get:
      tags: ["conversations"]
      summary: Get all conversations
      description: Return all my conversations
      operationId: getMyConversations
      parameters:
        - name: sortBy
          in: query
          description: Sort conversations by a specified field (ex. date)
          required: false
          schema:
            type: string
            pattern: "^[a-zA-Z0-9 .,!?'-]+$"
            minLength: 3
            maxLength: 10
            enum: [date]
      responses:
        '200':
          description: Conversations successfully returned
          content:
            application/json:
              schema:
                type: object
                description: The response schema for a successful retrieval of conversations.
                required: 
                  - conversations
                properties:
                  conversations:
                    type: array
                    description: A list of conversations belonging to the user.
                    minItems: 1
                    maxItems: 1000
                    items:
                      type: object
                      description: Schema for an individual conversation object.
                      required:
                        - Conversation_id
                        - title
                        - lastMessage
                        - updatedAt
                        - status
                      properties:
                        Conversation_id:
                          type: integer
                          description: The unique identifier for the conversation.
                          minimum: 1
                          maximum: 1000
                        title:
                          type: string
                          description: The title or name of the conversation.
                          pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                          minLength: 3
                          maxLength: 1000
                        lastMessage:
                          type: string
                          description: The content of the most recent message in the conversation.
                          pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                          minLength: 3
                          maxLength: 1000
                        updatedAt:
                          type: string
                          description: The timestamp of the last activity in the conversation.
                          format: date-time
                          pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                          minLength: 3
                          maxLength: 1000
                        status:
                          $ref: '#/components/schemas/Status'
                  totalCount:
                    type: integer
                    description: The total number of conversations.
                    minimum: 0
                    maximum: 1000

  /conversations/{Conversation_id}:
    get:
      tags: ["conversations"]
      summary: Get a conversation by its ID
      description: Return one specific conversation
      operationId: getConversation
      parameters:
        - name: Conversation_id
          in: path
          description: The unique identifier of the conversation to retrieve.
          required: true
          schema:
            type: integer
            description: "Schema for having a specific conversation"
            minimum: 1
            maximum: 1000
      responses:
        '200':
          description: Conversation successfully returned
          content:
            application/json:
              schema:
                type: object
                description: The schema for the conversation details response.
                required:
                  - Conversation_id
                  - title
                  - lastMessage
                  - updatedAt
                  - status
                properties:
                  Conversation_id:
                    type: integer
                    description: The unique identifier for the conversation.
                    minimum: 1
                    maximum: 1000
                  title:
                    type: string
                    description: The title or name of the conversation.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
                  lastMessage:
                    type: string
                    description: The content of the most recent message in the conversation.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
                  updatedAt:
                    type: string
                    description: The timestamp of the last activity in the conversation.
                    format: date-time
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
                  status:
                    type: string
                    description: "The status of the conversation: 'read' or 'unread'."
                    enum: ["read", "unread"]
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

    delete:
      tags: ["conversations"]
      summary: Delete a conversation by its ID
      description: Permanently deletes a specific conversation along with all messages associated with it.
      operationId: deleteConversation
      parameters:
        - name: Conversation_id
          in: path
          description: The unique identifier of the conversation to delete.
          required: true
          schema:
            type: integer
            description: "Schema for identifying a specific conversation to delete"
            minimum: 1
            maximum: 1000
      responses:
        '200':
          description: Conversation successfully deleted
          content:
            application/json:
              schema:
                type: object
                description: The response schema after successful deletion.
                required:
                  - message
                properties:
                  message:
                    type: string
                    description: Confirmation message indicating successful deletion.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        '403':
          description: Forbidden - User does not have permission to delete the conversation.
          content:
            application/json:
              schema:
                type: object
                description: Error response when the user does not have permission to delete the conversation.
                required:
                  - error
                properties:
                  error:
                    type: string
                    description: Error message indicating the user does not have permission.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                type: object
                description: Error response when the conversation does not exist.
                required:
                  - error
                properties:
                  error:
                    type: string
                    description: Error message indicating the conversation was not found.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

  /conversations/conversation:
    post:
      operationId: Checkcreateconv
      summary: "Check or create a conversation"
      description: >
        This endpoint checks if a conversation between the authenticated user and the specified recipient exists. 
        If the conversation does not exist, it creates a new one and returns the `conversation_id`.
      tags: ["conversations"]
      requestBody:
        description: "JSON object containing the recipient's user ID."
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Schema for return of a conversation
              required:
                - recipient_id
              properties:
                recipient_id:
                  type: integer
                  description: "The ID of the recipient user with whom the conversation should be checked or created."
                  minimum: 1
                  maximum: 1000
      responses:
        "200":
          description: "Conversation found or successfully created"
          content:
            application/json:
              schema:
                type: object
                description: schema for succesfully returned conversation
                properties:
                  conversation_id:
                    type: integer
                    description: "The ID of the existing or newly created conversation."                   
                    minimum: 1
                    maximum: 1000
        "400":
          description: "Invalid request or missing `recipient_id` in the body"
          content:
            application/json:
              schema:
                type: object
                description: schema for invalid return
                properties:
                  error:
                    type: string
                    description: "The string error"
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        "403":
          description: "Unauthorized: the user is not authorized to access this resource"
          content:
            application/json:
              schema:
                type: object
                description: schema for unauthorized access to a conversation
                properties:
                  error:
                    type: string
                    description: "The string error"
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'


  # -------------------------------------------------------
  # MESSAGES
  # -------------------------------------------------------
  /messages:
    post:
      tags: ["messages"]
      summary: Send a message
      description: Allows to send a message to a specific recipient
      operationId: sendMessage
      requestBody:
        description: Message details required to send a message.
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Schema for the request to send a message.
              required:
                - Recipient_id
                - messageContent
              properties:
                Recipient_id:
                  type: integer
                  description: "The unique identifier of the recipient."
                  minimum: 1
                  maximum: 1000
                messageContent:
                  type: string
                  description: "The content of the message (<= 500 chars)."
                  pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                  minLength: 1
                  maxLength: 1000
                timestamp:
                  type: string
                  format: date-time
                  description: "Optional timestamp. If omitted, server will set current time."
                  pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                  minLength: 3
                  maxLength: 1000
      responses:
        '201':
          description: Message sent successfully.
          content:
            application/json:
              schema:
                type: object
                description: Response structure for a successfully sent message.
                required:
                  - Message_id
                  - status
                properties:
                  Message_id:
                    type: integer
                    description: "The unique identifier assigned to the message."
                    minimum: 1
                    maximum: 1000
                  status:
                    type: string
                    description: "The current status of the message (unsent, sent, read)."
                    enum: ["unsent", "sent", "read"]
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 10
        '400':
          description: Invalid message details.
          content:
            application/json:
              schema:
                type: object
                description: Schema for validation errors.
                properties:
                  error:
                    type: string
                    description: Description of the validation error.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '403':
          description: Unauthorized action due to invalid or missing token.
          content:
            application/json:
              schema:
                type: object
                description: Schema for missing or invalid token
                properties:
                  error:
                    type: string
                    description: "Unauthorized user. The token provided is invalid or missing."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'


  /messages/{Message_id}:
    get:
      tags: ["messages"]
      summary: Get a message
      description: Retrieve the details of a specific message by its unique ID.
      operationId: getMessage
      parameters:
        - name: Message_id
          in: path
          required: true
          description: "The unique ID of the message to retrieve."
          schema:
            type: integer
            minimum: 1
            maximum: 1000
      responses:
        '200':
          description: Message retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                description: Schema for the retrieved message.
                required:
                  - Message_id
                  - Sender_id
                  - Conversation_id
                  - MessageContent
                  - Timestamp
                  - Reactions
                properties:
                  Message_id:
                    type: integer
                    description: "The unique identifier of the message."
                    minimum: 1
                    maximum: 1000
                  Sender_id:
                    type: integer
                    description: "The ID of the user who sent the message."
                    minimum: 1
                    maximum: 1000
                  Conversation_id:
                    type: integer
                    description: "The ID of the user who received the message."
                    minimum: 1
                    maximum: 1000
                  MessageContent:
                    type: string
                    description: "The content of the message."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
                  Timestamp:
                    type: string
                    format: date-time
                    description: "The timestamp when the message was sent."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
                  Reactions:
                    type: string
                    description: "A string containing the reactions for the message."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '400':
          description: Invalid Message ID format or missing ID.
          content:
            application/json:
              schema:
                type: object
                description: The schema for the error of invalid or missing Id.
                properties:
                  error:
                    type: string
                    description: "Details about the error."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '403':
          description: User does not have permission to access this message.
          content:
            application/json:
              schema:
                type: object
                description: The schema for the error of invalid permission
                properties:
                  error:
                    type: string
                    description: "Permission denied."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '404':
          description: Message not found.
          content:
            application/json:
              schema:
                type: object
                description: The schema for the error of message not found
                properties:
                  error:
                    type: string
                    description: "The message ID does not exist."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      
    delete:
      tags: ["messages"]
      summary: Delete a message
      description: Delete a specific message
      operationId: deleteMessage
      parameters:
        - name: Message_id
          in: path
          required: true
          description: "The unique identifier of the message to be deleted."
          schema:
            type: integer
            minimum: 1
            maximum: 1000
      responses:
        '200':
          description: Message deleted successfully.
          content:
            application/json:
              schema:
                type: object
                description: Confirmation that the message has been deleted.
                properties:
                  success:
                    type: boolean
                    description: "Indicates that the operation was successful."
                  message:
                    type: string
                    description: "Descriptive confirmation of the deletion."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '400':
          description: Invalid request. The provided `Message_id` is malformed or missing.
          content:
            application/json:
              schema:
                type: object
                description: Rejection of deleting a message.
                properties:
                  error:
                    type: string
                    description: "Error message explaining the invalid data."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                type: object
                description: Schema for permission denied
                properties:
                  error:
                    type: string
                    description: "Permission error."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '404':
          description: Message not found.
          content:
            application/json:
              schema:
                type: object
                description: Rejection of deleting a message caused by not found
                properties:
                  error:
                    type: string
                    description: "The specified Message_id does not exist."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'


  /messages/{Message_id}/forwards:
    post:
      tags: ["messages"]
      summary: Forward a message
      description: Forward a message to a specific conversation
      operationId: forwardMessage
      parameters:
        - name: Message_id
          in: path
          required: true
          description: "The unique ID of the original message"
          schema:
            type: integer
            minimum: 1
            maximum: 1000
      requestBody:
        description: Details for forwarding the message.
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Schema for the request to forward a message.
              required:
                - Conversation_id
                - Timestamp
              properties:
                Conversation_id:
                  type: integer
                  description: "The unique identifier of the conversation."
                  minimum: 1
                  maximum: 1000
                Timestamp:
                  type: string
                  format: date-time
                  description: "When forwarded. If not provided, server sets current time."
                  pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                  minLength: 3
                  maxLength: 1000
      responses:
        '201':
          description: Message forwarded successfully.
          content:
            application/json:
              schema:
                type: object
                description: Response structure for a successfully forwarded message.
                required:
                  - Message_id
                  - status
                properties:
                  Message_id:
                    type: integer
                    minimum: 1
                    maximum: 1000
                    description: "The new forwarded message ID."
                  status:
                    type: string
                    description: "Status of the forwarded message (unsent, sent, read)."
                    enum: ["unsent", "sent", "read"]
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 10
        '400':
          description: Invalid input or missing required fields.
          content:
            application/json:
              schema:
                description: Schema for validation errors.
                type: object
                properties:
                  error:
                    type: string
                    description: "Validation error details."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '403':
          description: User does not have permission to forward this message.
          content:
            application/json:
              schema:
                type: object
                description: User is not authorized to forward the message.
                properties:
                  error:
                    type: string
                    description: "Permission denied"
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '404':
          description: Message or conversation not found.
          content:
            application/json:
              schema:
                type: object
                description: Schema for resource not found errors.
                properties:
                  error:
                    type: string
                    description: "Message o Conversation ID not found."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'


  # Reactions come sottorisorsa
  /messages/{Message_id}/reactions:
    post:
      tags: ["messages"]
      summary: Add a reaction
      description: Adds a reaction to a specific message.
      operationId: commentMessage
      parameters:
        - name: Message_id
          in: path
          required: true
          description: "ID of the message to which the reaction will be added."
          schema:
            type: integer
            minimum: 1
            maximum: 1000
      requestBody:
        description: Details of the reaction to add.
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Schema for adding a reaction to a message.
              required:
                - emoji
              properties:
                emoji:
                  type: string
                  description: "The emoji or symbol representing the reaction."
                  pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                  minLength: 1
                  maxLength: 1000
      responses:
        '201':
          description: Reaction added successfully.
          content:
            application/json:
              schema:
                description: Response structure for a successful reaction addition.
                type: object
                required:
                  - Reaction_id
                  - status
                properties:
                  Reaction_id:
                    type: integer
                    description: "Unique identifier of the added reaction."
                    minimum: 1
                    maximum: 1000
                  status:
                    $ref: '#/components/schemas/Status'
        '400':
          description: Invalid data provided.
          content:
            application/json:
              schema:
                type: object
                description: Schema for validation errors.
                properties:
                  error:
                    type: string
                    description: "Validation error details (e.g. invalid emoji)."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '404':
          description: Message not found.
          content:
            application/json:
              schema:
                type: object
                description: Schema for resource not found errors.
                properties:
                  error:
                    type: string
                    description: "The specified message ID does not exist."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

    delete:
      tags: ["messages"]
      summary: Remove a reaction (or all reactions)
      description: Removes a reaction from a specific message. If the request body is empty or not provided, remove all reactions.
      operationId: uncommentMessage
      parameters:
        - name: Message_id
          in: path
          required: true
          description: "ID of the message from which the reaction will be removed."
          schema:
            type: integer
            minimum: 1
            maximum: 1000
      responses:
        '200':
          description: Reaction removed successfully.
          content:
            application/json:
              schema:
                type: object
                description: Response structure for a successful reaction removal.
                required:
                  - Reaction_id
                  - status
                properties:
                  Reaction_id:
                    type: integer
                    minimum: 1
                    maximum: 1000
                    description: "The unique identifier of the removed reaction."
                  status:
                    $ref: '#/components/schemas/Status'
        '400':
          description: Invalid data provided.
          content:
            application/json:
              schema:
                type: object
                description: Response for an error caused by invalid data.
                properties:
                  error:
                    type: string
                    description: "Validation error details."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '404':
          description: Message or reaction not found.
          content:
            application/json:
              schema:
                type: object
                description: Response for an error caused by message not found.
                properties:
                  error:
                    type: string
                    description: "Specified message or reaction does not exist."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

    get:
      tags: ["messages"]
      summary: Get reactions
      description: Retrieves all reactions for a specific message.
      operationId: getReactions
      parameters:
        - name: Message_id
          in: path
          required: true
          description: "ID of the message to get reactions for."
          schema:
            type: integer
            minimum: 1
            maximum: 1000
      responses:
        '200':
          description: Reactions retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                description: List of reactions for the specified message.
                items:
                  type: object
                  properties:
                    Emoji:
                      type: string
                      description: "The emoji or symbol representing the reaction."
                      pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                      minLength: 3
                      maxLength: 1000
                    User_id:
                      type: integer
                      description: "ID of the user who reacted."
                      minimum: 1
                      maximum: 1000
                      
        '404':
          description: Message not found.
          content:
            application/json:
              schema:
                type: object
                description: Schema for resource not found errors.
                properties:
                  error:
                    type: string
                    description: "The specified message ID does not exist."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
                  

  # -------------------------------------------------------
  # GROUPS
  # -------------------------------------------------------

  /groups:
    post:
      tags: ["groups"]
      summary: Create a new group
      description: Allows creating a group by a user.
      operationId: createGroup
      requestBody:
        description: Details of the group to create.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - group_name
              description: Schema for creating a group.
              properties:
                group_name:
                  type: string
                  description: "The name of the group."
                  pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                  minLength: 3
                  maxLength: 100
      responses:
        '201':
          description: Group created successfully.
          content:
            application/json:
              schema:
                type: object
                description: Schema for a positive response.
                required:
                  - group_id
                  - group_name
                  - creator_id
                properties:
                  group_id:
                    type: integer
                    description: "The unique ID of the created group."
                    minimum: 1
                    maximum: 1000
                  group_name:
                    type: string
                    description: "The name of the created group."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 100
                  creator_id:
                    type: integer
                    description: "The ID of the group creator."
                    minimum: 1
                    maximum: 1000
        '400':
          description: Invalid data for group creation.
          content:
            application/json:
              schema:
                type: object
                description: Schema for invalid input response.
                properties:
                  error:
                    type: string
                    description: "Error details."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Internal server error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
  
  /groups/{Group_id}/users:
    get:
      tags: ["groups"]
      summary: Get group members
      description: >
        Returns the list of users who are members of a specific group, identified by its unique ID.
        Each member includes their user ID, nickname, and role in the group (e.g., "member", "admin").
      operationId: getGroupMembers
      parameters:
        - name: Group_id
          in: path
          required: true
          description: Unique ID of the group to retrieve members from.
          schema:
            type: integer
            minimum: 1
            maximum: 1000
      responses:
        "200":
          description: List of users in the group successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                description: Array of group members
                minItems: 1
                maxItems: 1000
                items:
                  type: object
                  properties:
                    group_member_id:
                      type: integer
                      description: Internal ID of the group member record
                      minimum: 1
                      maximum: 1000
                    group_id:
                      type: integer
                      description: ID of the group
                      minimum: 1
                      maximum: 1000
                    user_id:
                      type: integer
                      description: ID of the user
                      minimum: 1
                      maximum: 1000
                    nickname:
                      type: string
                      description: Nickname of the user
                      minLength: 3
                      maxLength: 100
                      pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    role:
                      type: string
                      description: Role of the user in the group
                      enum: ["member", "admin"]
                      minLength: 3
                      maxLength: 100
                      pattern: "^[a-zA-Z0-9 .,!?'-]+$"
        '404':
            description: Group or user not found.
            content:
              application/json:
                schema:
                  type: object
                  description: Schema for error caused by not found.
                  properties:
                    error:
                      type: string
                      description: "Group or user not found."
                      pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                      minLength: 3
                      maxLength: 1000
        '500':
            description: Server error.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error500'

  /groups/{Group_id}/users/{User_id}:
    post:
      tags: ["groups"]
      summary: Add, remove or promote a user in a group
      description: Adds, removes or promotes a user in a specific group.
      operationId: manageGroupUsers
      parameters:
        - name: Group_id
          description: The integer that describes the Group_id.
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            description: "The ID of the group."
        - name: User_id
          description: The integer that describes the User_id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            description: "The ID of the user."
      requestBody:
        description: Details of the user to add remove or promote
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Request body for managing group users.
              required:
                - User_id
                - action
              properties:
                User_id:
                  type: integer
                  description: "ID of the user to add or remove."
                  minimum: 1
                  maximum: 1000
                action:
                  type: string
                  description: "Action to perform: 'add', 'remove' or 'promote'."
                  enum: ["add", "remove", "promote"]
                role:
                  type: string
                  description: "The role assigned to the user when adding (e.g., 'member', 'admin')."
                  pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                  minLength: 3
                  maxLength: 1000
      responses:
        '201':
          description: User successfully managed in the group.
          content:
            application/json:
              schema:
                type: object
                description: Schema for a successful response.
                required:
                  - success
                  - message
                properties:
                  success:
                    type: boolean
                    description: "Indicates the operation was successful."
                    example: true
                  message:
                    type: string
                    description: "A confirmation message."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '400':
          description: Invalid data (Group_id, User_id, or action).
          content:
            application/json:
              schema:
                type: object
                description: Schema for invalid data.
                properties:
                  error:
                    type: string
                    description: "Details of the error."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '404':
          description: Group or user not found.
          content:
            application/json:
              schema:
                type: object
                description: Schema for error caused by not found.
                properties:
                  error:
                    type: string
                    description: "Group or user not found."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

  
  /groups/{Group_id}:
    patch:
      tags: ["groups"]
      summary: Update group name
      description: Allows updating certain group fields (like the group name).
      operationId: setGroupName
      parameters:
        - name: Group_id
          in: path
          description: Integer that represents Group_id
          required: true
          schema:
            type: integer
            description: "The unique ID of the group."
            minimum: 1
            maximum: 1000
      requestBody:
        description: The new name for the group.
        required: true
        content:
          application/json-patch+json:
            schema:
              type: object
              required:
                - groupName
              description: "Schema for renaming a group"
              properties:
                groupName:
                  type: string
                  description: "New group name."
                  pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                  minLength: 3
                  maxLength: 1000
      responses:
        '200':
          description: Group name updated successfully.
          content:
            application/json:
              schema:
                type: object
                description: Schema for positive name update.
                required:
                  - Group_id
                  - groupName
                properties:
                  Group_id:
                    type: integer
                    description: "The unique ID of the group."
                    minimum: 1
                    maximum: 1000
                  groupName:
                    type: string
                    description: "The updated name of the group."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '400':
          description: Invalid group name or Group_id provided.
          content:
            application/json:
              schema:
                type: object
                description: Schema for negative response caused by invalid Group_id
                properties:
                  error:
                    type: string
                    description: "Error details."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '404':
          description: Group not found.
          content:
            application/json:
              schema:
                type: object
                description: Schema for error caused by not found.
                properties:
                  error:
                    type: string
                    description: "The specified group does not exist."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Internal server error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

    delete:
      tags: ["groups"]
      summary: Delete a group
      description: Allows the deletion of a group. Only the creator or an admin can delete the group.
      operationId: deleteGroup
      parameters:
        - name: Group_id
          in: path
          required: true
          description: "The unique ID of the group to delete."
          schema:
            type: integer
            minimum: 1
            maximum: 1000
      responses:
        '200':
          description: Group deleted successfully.
          content:
            application/json:
              schema:
                type: object
                description: Schema for successful deletion response.
                required:
                  - success
                  - message
                properties:
                  success:
                    type: boolean
                    description: "Indicates if the deletion was successful."
                    example: true
                  message:
                    type: string
                    description: "A confirmation message."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '403':
          description: User not authorized to delete the group.
          content:
            application/json:
              schema:
                type: object
                description: Schema for unauthorized response.
                properties:
                  error:
                    type: string
                    description: "Error details."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '404':
          description: Group not found.
          content:
            application/json:
              schema:
                type: object
                description: Schema for group not found response.
                properties:
                  error:
                    type: string
                    description: "The specified group does not exist."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Internal server error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
              
  /groups/{Group_id}/photo: 
    put:
      tags: ["groups"]
      summary: Add or update a group photo
      description: Allows an admin or the creator to upload or update a group's profile photo.
      operationId: addGroupPhoto
      parameters:
        - name: Group_id
          in: path
          required: true
          description: "The unique ID of the group."
          schema:
            type: integer
            minimum: 1
            maximum: 1000
      requestBody:
        description: The group photo to upload.
        required: true
        content:
          multipart/form-data:
            schema:
              minLength: 1
              maxLength: 1000
              type: object
              required:
                - photo
              description: Schema for uploading a photo.
              properties:
                photo:
                  type: string
                  format: binary
                  description: "The image file for the group's profile photo."
                  pattern: "^[01]+$"
                  minLength: 1
                  maxLength: 100
      responses:
        '200':
          description: Group photo uploaded successfully.
          content:
            application/json:
              schema:
                type: object
                description: Schema for successful upload response.
                required:
                  - success
                  - message
                properties:
                  success:
                    type: boolean
                    description: "Indicates if the upload was successful."
                    example: true
                  message:
                    type: string
                    description: "A confirmation message."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '400':
          description: Invalid file upload or bad request.
          content:
            application/json:
              schema:
                type: object
                description: Schema for invalid upload response.
                properties:
                  error:
                    type: string
                    description: "Error details."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '403':
          description: User not authorized to upload a photo.
          content:
            application/json:
              schema:
                type: object
                description: Schema for unauthorized response.
                properties:
                  error:
                    type: string
                    description: "Error details."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '404':
          description: Group not found.
          content:
            application/json:
              schema:
                type: object
                description: Schema for group not found response.
                properties:
                  error:
                    type: string
                    description: "The specified group does not exist."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Internal server error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'


    get:
      tags: ["groups"]
      summary: Retrieve a group's profile photo
      description: Fetches the profile photo of a specified group.
      operationId: getGroupPhoto
      parameters:
        - name: Group_id
          in: path
          required: true
          description: "The unique ID of the group."
          schema:
            type: integer
            minimum: 1
            maximum: 1000
      responses:
        '200':
          description: Group photo returned successfully.
          content:
            application/json:
              schema:
                type: object
                description: Schema for successful returned response.
                required:
                  - success
                  - message
                properties:
                  success:
                    type: boolean
                    description: "Indicates if the return was successful."
                    example: true
                  message:
                    type: string
                    description: "A confirmation message."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '400':
          description: Invalid group ID format.
          content:
            application/json:
              schema:
                type: object
                description: Schema for invalid request response.
                properties:
                  error:
                    type: string
                    description: "Error details."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '404':
          description: Group photo not found.
          content:
            application/json:
              schema:
                type: object
                description: Schema for group photo not found response.
                properties:
                  error:
                    type: string
                    description: "The group does not have a profile photo."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Internal server error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'


  /groups/{Group_id}/messages:
    post:
      tags: ["groups"]
      summary: Send a message to a group
      description: Sends a message to the specified group if the sender is a member of the group.
      operationId: SendMessageToGroup
      parameters:
        - name: Group_id
          in: path
          description: The unique ID of the group to send the message to. Must be an integer between 1 and 1000.
          required: true
          schema:
            type: integer
            description: The unique group identifier.
            minimum: 1
            maximum: 1000
      requestBody:
        description: The message content to send to the group.
        required: true
        content:
          application/json:
            schema:
              type: object
              description: The schema for the content of a message
              properties:
                message_content:
                  type: string
                  description: The content of the message. Must be between 1 and 1000 characters.
                  minLength: 1
                  maxLength: 1000
                  pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                timestamp:
                  type: string
                  format: date-time
                  description: "Optional timestamp. If omitted, server will set current time."
                  pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                  minLength: 3
                  maxLength: 1000
      responses:
        '201':
          description: Message sent successfully.
          content:
            application/json:
              schema:
                type: object
                description: The schema for a successfully sent message
                properties:
                  message_id:
                    type: integer
                    description: The ID of the newly created message.
                    minimum: 1
                    maximum: 1000
                  status:
                    type: string
                    description: "The current status of the message (unsent, sent, read)."
                    enum: ["unsent", "sent", "read"]
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 10
        '400':
          description: Invalid request parameters or payload.
          content:
            application/json:
              schema:
                type: object
                description: The schema for an invalid request parameters
                properties:
                  error:
                    type: string
                    description: A description of the error.
                    minLength: 1
                    maxLength: 1000
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    
        '403':
          description: User is not authorized to send a message to the group.
          content:
            application/json:
              schema:
                type: object
                description: The schema of an unauthorized user to send message
                properties:
                  error:
                    type: string
                    description: A description of the authorization error.
                    minLength: 1
                    maxLength: 1000
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
        '500':
          description: Internal server error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

  # -------------------------------------------------------
  # PERMISSIONS
  # -------------------------------------------------------
  /permissions/users/{User_id}:
    post:
      tags: ["users"]
      summary: Check user permissions
      description: Verifies if a user has the necessary permissions to perform a specific action.
      operationId: checkUserPermissions
      parameters:
        - name: User_id
          description: Integer that represents User_id
          in: path
          required: true
          schema:
            type: integer
            description: "The unique ID of the user."
            minimum: 1
            maximum: 1000
      requestBody:
        description: The action for which permission needs to be checked.
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Schema for positive response of authorization
              required:
                - action
              properties:
                action:
                  type: string
                  description: "Action to verify (e.g., 'setGroupPhoto')."
                  pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                  minLength: 3
                  maxLength: 1000
      responses:
        '200':
          description: Permission status verified successfully.
          content:
            application/json:
              schema:
                type: object
                description: Schema for positive status verification
                required:
                  - allowed
                  - message
                properties:
                  allowed:
                    type: boolean
                    description: "If true, user is authorized to perform the action."
                    example: true
                  message:
                    type: string
                    description: "Additional info about the permission status."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '403':
          description: Unauthorized action - user lacks the required permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        '400':
          description: Bad request - invalid input data.
          content:
            application/json:
              schema:
                type: object
                description: Schema for negative response caused by invalid input data
                properties:
                  error:
                    type: string
                    description: "Details about invalid request data."
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'