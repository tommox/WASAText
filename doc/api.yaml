openapi: 3.0.3 

info:
  title: WASAText
  description: |-
    This OpenAPI document describes how WASAText works.
  version: "1"

components:
  securitySchemes:
    bearerAuth: 
      type: http
      scheme: bearer
  schemas:
    Name:
      type: string
      description: "The name of the user, which must be between 3 and 16 characters."
      pattern: '^.{3,16}$'
      minLength: 3
      maxLength: 16
    Error500:
      type: object
      description: "Schema for a server error (500)."
      properties:
        error:
          type: string
          description: "The code of the error"
          pattern: "^[a-zA-Z0-9 .,!?'-]+$"
          minLength: 3
          maxLength: 1000
    Error401:
      type: object
      description: "Schema for unauthorized access (401)."
      properties:
        error:
          type: string
          description: "The code of the error"
          pattern: "^[a-zA-Z0-9 .,!?'-]+$"
          minLength: 3
          maxLength: 1000
    Error403:
      type: object
      description: "Schema for forbidden access (403)."
      properties:
        error:
          type: string
          description: "The code of the error"
          pattern: "^[a-zA-Z0-9 .,!?'-]+$"
          minLength: 3
          maxLength: 1000
    Status:
      type: string
      description: Represents the status of the operation.
      enum: ["unsent", "sent", "read", "uploaded", "updated"]
      pattern: "^[a-zA-Z0-9 .,!?'-]+$"
      minLength: 3
      maxLength: 1000
  
security:
  - bearerAuth: []

tags:
  - name: login
    description: Handle login actions
  - name: user
    description: Handle user actions
  - name: conversation
    description: Handle conversation actions
  - name: message
    description: Handle message actions
  - name: group
    description: Handle group actions


paths: 
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user 
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin 
      requestBody:
        description: User details 
        content:
          application/json: 
            schema:
              type: object 
              description: Schema for user login details.
              properties:
                name:
                  $ref: '#/components/schemas/Name'
        required: true 
      responses:
        '201':
          description: User log-in action successful 
          content:
            application/json: 
              schema:
                type: object 
                description: Schema for a successful log-in response.
                properties:
                  identifier:
                    type: string
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    description: "A unique identifier for the user"
                    minLength: 3
                    maxLength: 1000
        '400':
          description: Invalid username length
          content:
            application/json:
              schema:
                  type: object
                  description: Schema for a bad request due to invalid username length.
                  properties:
                    error:
                      type: string
                      pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                      description: "A unique identifier for the user"
                      minLength: 3
                      maxLength: 1000
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

  /username/{userId}:
    put: 
      tags: ["user"]
      summary: Set the name of the user
      description: Allows users to update their username.
      operationId: setMyUserName
      parameters:
      - name: userId
        in: path
        required: true
        description: "The unique identifier of the user"
        schema:
          type: string
          description: "The unique identifier of the user whose username is being updated"
          pattern: "^[a-zA-Z0-9 .,!?'-]+$"
          minLength: 3
          maxLength: 1000
      requestBody: 
        description: update username 
        content:
          application/json:
            schema:
              type: object
              description: Schema for updating the user's username.
              properties:
                newUserName:
                  $ref: '#/components/schemas/Name'
        required: true
      responses:
        '200':
          description: Username successfully updated
          content:
            application/json:
              schema:
                type: object
                description: Schema for a successful username update response.
                properties:
                  success:
                    type: boolean
                    description: "The username is successfully updated if boolean = true"
                  message: 
                    type: string
                    description: "The message which confirm the update"
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '400':
          description: Invalid username format or length
          content:
            application/json:
              schema:
                type: object
                description: Schema for a bad request due to invalid username details.
                properties:
                  error:
                    type: string
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    description: "The code of the error"
                    minLength: 3
                    maxLength: 1000
        '401':
          description: Unauthorized action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
        
  /conversations:
    get:
      tags: ["conversation"]
      summary: Get my conversations
      description: Return all my conversations
      operationId: getMyConversations
      parameters:
        - name: sortBy
          in: query
          description: Sort conversations by a specified field (ex. date)
          required: false
          schema:
            type: string
            pattern: "^[a-zA-Z0-9 .,!?'-]+$"
            minLength: 3
            maxLength: 10
            enum: [date]
      responses:
        '200':
          description: Conversations successfully returned
          content:
            application/json:
              schema:
                type: object
                description: The response schema for a successful retrieval of conversations.
                required: 
                  - conversations
                properties:
                  conversations:
                    type: array
                    description: A list of conversations belonging to the user.
                    minItems: 1
                    maxItems: 1000
                    items:
                      type: object
                      description: Schema for an individual conversation object.
                      required:
                        - conversationId
                        - title
                        - lastMessage
                        - updatedAt
                        - status
                      properties:
                        conversationId:
                          type: string
                          description: The unique identifier for the conversation.
                          pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                          minLength: 3
                          maxLength: 1000
                        title:
                          type: string
                          description: The title or name of the conversation.
                          pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                          minLength: 3
                          maxLength: 1000
                        lastMessage:
                          type: string
                          description: The content of the most recent message in the conversation.
                          pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                          minLength: 3
                          maxLength: 1000
                        updatedAt:
                          type: string
                          description: The timestamp of the last activity in the conversation.
                          format: date-time
                          pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                          minLength: 3
                          maxLength: 1000
                        status:
                          $ref: '#/components/schemas/Status'
                  totalCount:
                    type: integer
                    description: The total number of conversations.
                    minimum: 0
                    maximum: 100000



  /conversation/{conversationId}:
    get:
      tags: ["conversation"]
      summary: Get a conversation by its ID
      description: |-
        Return one specific conversation
      operationId: getConversation
      parameters:
      - name: conversationId
        in: path
        description: |
            The unique identifier of the conversation to retrieve.
            This value is mandatory and must match an existing conversation ID
        required: true
        schema:
          type: string
          pattern: "^[a-zA-Z0-9 .,!?'-]+$"
          minLength: 3
          maxLength: 1000
      responses:
        '200':
          description: Conversations successfully returned
          content:
            application/json:
              schema:
                type: object
                description: The schema for the conversation details response.
                required:
                  - conversationId
                  - title
                  - lastMessage
                  - updatedAt
                  - status
                properties:
                  conversationId:
                    type: string
                    description: The unique identifier for the conversation.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
                  title:
                    type: string
                    description: The title or name of the conversation.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
                  lastMessage:
                    type: string
                    description: The content of the most recent message in the conversation.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
                  updatedAt:
                    type: string
                    description: The timestamp of the last activity in the conversation.
                    format: date-time
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
                  status:
                    type: string
                    description: |
                      The status of the conversation. It can be either:
                      - `read`: All messages in the conversation have been read.
                      - `unread`: There are unread messages in the conversation.
                    enum: ["read", "unread"]
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
              
  /sMessage:
    post:
      tags: ["message"]
      summary: Send a message
      description: |-
        Allows to send a message to a specific recipient
      operationId: sendMessage
      requestBody:
        description: Message details required to send a message.
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Schema for the request to send a message.
              required:
                - recipientId
                - messageContent
              properties:
                recipientId:
                  type: string
                  description: |
                    The unique identifier of the recipient to whom the message will be sent.
                  pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                  minLength: 3
                  maxLength: 16
                messageContent:
                  type: string
                  description: |
                    The content of the message being sent. It must not exceed 500 characters.
                  pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                  minLength: 3
                  maxLength: 1000
                timestamp:
                  type: string
                  format: date-time
                  description: |
                    The timestamp indicating when the message was created or sent. 
                    If not provided, the server will assign the current time.
                  pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                  minLength: 3
                  maxLength: 1000
      responses:
        '201':
          description: Message sent successfully.
          content:
            application/json:
              schema:
                type: object
                description: Response structure for a successfully sent message.
                required:
                  - messageId
                  - status
                properties:
                  messageId:
                    type: string
                    description: The unique identifier assigned to the message.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 100000
                  status:
                    type: string
                    description: |
                      The current status of the message. Possible values are:
                      - `unsent`: The message is not sent yet.
                      - `sent`: The message has been sent but not read.
                      - `read`: The message has been read by the recipient.
                    enum: ["unsent", "sent", "read"]
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 10
        '400':
          description: Invalid message details.
          content:
            application/json:
              schema:
                type: object
                description: Schema for validation errors.
                properties:
                  error:
                    type: string
                    description: Description of the validation error.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'


  /fMessage/{messageId}:
    post:
      tags: ["message"]
      summary: Forward a message
      description: |-
        Forward a message to a specific recipient
      operationId: forwardMessage
      parameters:
        - name: messageId
          in: path
          required: true
          description: "The code of the message"
          schema:
            type: string
            description: The unique identifier of the message to be forwarded.
            pattern: "^[a-zA-Z0-9 .,!?'-]+$"
            minLength: 3
            maxLength: 1000
      requestBody:
        description: Details for forwarding the message.
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Schema for the request to forward a message.
              required:
                - recipientId
              properties:
                recipientId:
                  type: string
                  description: |
                    The unique identifier of the recipient to whom the message will be forwarded.
                  pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                  minLength: 3
                  maxLength: 16
                messageContent:
                  type: string
                  description: |
                    The content of the forwarded message. If omitted, the original message content will be used.
                  pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                  minLength: 3
                  maxLength: 1000
                timestamp:
                  type: string
                  format: date-time
                  description: |
                    The timestamp indicating when the message was forwarded. 
                    If not provided, the server will assign the current time.
                  pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                  minLength: 3
                  maxLength: 1000
      responses:
        '201':
          description: Message forwarded successfully.
          content:
            application/json:
              schema:
                type: object
                description: Response structure for a successfully forwarded message.
                required:
                  - messageId
                  - status
                properties:
                  messageId:
                    type: string
                    description: |
                      The unique identifier assigned to the forwarded message.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
                  status:
                    type: string
                    description: |
                      The current status of the forwarded message. Possible values are:
                      - `unsent`: The message is not sent yet.
                      - `sent`: The message has been sent but not read.
                      - `read`: The message has been read by the recipient.
                    enum: ["unsent", "sent", "read"]
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 10
        '400':
          description: Invalid input or missing required fields.
          content:
            application/json:
              schema:
                type: object
                description: Schema for validation errors.
                properties:
                  error:
                    type: string
                    description: Description of the validation error.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '404':
          description: Message not found.
          content:
            application/json:
              schema:
                type: object
                description: Schema for resource not found errors.
                properties:
                  error:
                    type: string
                    description: |
                      A message indicating that the specified message ID does not exist.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'


  /cMessage/{messageId}:
    post:
      tags: ["message"]
      summary: Add a reaction to a message
      description: Adds a reaction to a specific message.
      operationId: commentMessage
      parameters:
        - name: messageId
          in: path
          required: true
          description: "The code of the message"
          schema:
            type: string
            description: The unique identifier of the message to which the reaction will be added.
            pattern: "^[a-zA-Z0-9 .,!?'-]+$"
            minLength: 3
            maxLength: 1000
      requestBody:
        description: Details of the reaction to add.
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Schema for adding a reaction to a message.
              required:
                - emoji
              properties:
                emoji:
                  type: string
                  description: The emoji or symbol representing the reaction.
                  pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                  minLength: 3
                  maxLength: 1000
      responses:
        '201':
          description: Reaction added successfully.
          content:
            application/json:
              schema:
                type: object
                description: Response structure for a successful reaction addition.
                required:
                  - reactionId
                  - status
                properties:
                  reactionId:
                    type: string
                    description: The unique identifier of the added reaction.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
                  status:
                    $ref: '#/components/schemas/Status'
        '400':
          description: Invalid data provided.
          content:
            application/json:
              schema:
                type: object
                description: Schema for validation errors.
                properties:
                  error:
                    type: string
                    description: |
                      A message indicating the specific validation error encountered, 
                      such as an invalid emoji format.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '404':
          description: Message not found.
          content:
            application/json:
              schema:
                type: object
                description: Schema for resource not found errors.
                properties:
                  error:
                    type: string
                    description: |
                      A message indicating that the specified message ID does not exist.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'


  /uMessage/{messageId}:
    post:
      tags: ["message"]
      summary: Remove a reaction from a message
      description: Removes a reaction to a specific message.
      operationId: uncommentMessage
      parameters:
        - name: messageId
          in: path
          required: true
          description: "The code of the message"
          schema:
            type: string
            description: The unique identifier of the message from which the reaction will be removed.
            pattern: "^[a-zA-Z0-9 .,!?'-]+$"
            minLength: 3
            maxLength: 1000
      requestBody:
        description: Details of the reaction to remove.
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Schema for remove a reaction to a message.
              required:
                - emoji
              properties:
                emoji:
                  type: string
                  description: The emoji or symbol of the reaction to be removed. If empty, all reactions are removed.
                  pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                  minLength: 3
                  maxLength: 1000
      responses:
        '200':
          description: Reaction removed successfully.
          content:
            application/json:
              schema:
                type: object
                description: Response structure for a successful reaction removal.
                required:
                  - reactionId
                  - status
                properties:
                  reactionId:
                    type: string
                    description: The unique identifier of the removed reaction.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
                  status:
                    $ref: '#/components/schemas/Status'
        '400':
          description: Invalid data provided.
          content:
            application/json:
              schema:
                type: object
                description: Schema for validation errors.
                properties:
                  error:
                    type: string
                    description: A message indicating the specific validation error encountered.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '404':
          description: Message or reaction not found.
          content:
            application/json:
              schema:
                type: object
                description: Schema for resource not found errors.
                properties:
                  error:
                    type: string
                    description: |
                      A message indicating that the specified message ID or reaction does not exist.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

  /dMessage/{messageId}:
    delete:
      tags: ["message"]
      summary: Delete a message
      description: Delete a specific message
      operationId: deleteMessage
      parameters:
        - name: messageId
          in: path
          required: true
          description: "The code of the message"
          schema:
            type: string
            description: The unique identifier of the message to be deleted.
            pattern: "^[a-zA-Z0-9 .,!?'-]+$"
            minLength: 3
            maxLength: 1000
      responses:
        '204':
          description: Message deleted successfully.
          content:
            application/json:
              schema:
                type: object
                description: Confirmation that the message has been deleted.
                properties:
                  success:
                    type: boolean
                    description: Indicates that the operation was successful.
                  message:
                    type: string
                    description: Descriptive confirmation of the deletion.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '400':
          description: Invalid request. The provided `messageId` is malformed or missing.
          content:
            application/json:
              schema:
                type: object
                description: Error response for invalid data.
                properties:
                  error:
                    type: string
                    description: The error message explaining what went wrong.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '404':
          description: Message not found. The specified `messageId` does not exist.
          content:
            application/json:
              schema:
                type: object
                description: Error response for resource not found.
                properties:
                  error:
                    type: string
                    description: A message indicating that the message could not be found.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Server error. An internal issue occurred while trying to delete the message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

  
  /aGroup/{groupId}/users/{userId}:
    post:
      tags: ["group"]
      summary: Add a user to a group
      description: Assigns a specific user to a group.
      operationId: addToGroup
      parameters:
        - name: groupId
          in: path
          required: true
          description: "The code of the group"
          schema:
            type: string
            description: The unique identifier of the group where the user will be added.
            pattern: "^[a-zA-Z0-9 .,!?'-]+$"
            minLength: 3
            maxLength: 1000
        - name: userId
          in: path
          required: true
          description: "The code of the user"
          schema:
            type: string
            description: The unique identifier of the user to be added to the group.
            pattern: "^[a-zA-Z0-9 .,!?'-]+$"
            minLength: 3
            maxLength: 1000
      requestBody:
        description: Details of the role assigned to the user in the group.
        content:
          application/json:
            schema:
              type: object
              required:
                - role
              description: "The code of the role"
              properties:
                role:
                  type: string
                  description: The role assigned to the user in the group (e.g., member, admin).
                  pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                  minLength: 3
                  maxLength: 1000
        required: true
      responses:
        '201':
          description: User successfully added to the group.
          content:
            application/json:
              schema:
                type: object
                description: "The schema of adding a member to a group"
                required:
                  - groupId
                  - userId
                  - role
                properties:
                  groupId:
                    type: string
                    description: The ID of the group to which the user was added.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
                  userId:
                    type: string
                    description: The ID of the user who was added to the group.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
                  role:
                    type: string
                    description: The role assigned to the user in the group.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '400':
          description: Invalid data. The provided groupId, userId, or role is invalid.
          content:
            application/json:
              schema:
                type: object
                description: "The schema of the error 400"
                properties:
                  error:
                    type: string
                    description: A message describing the issue with the request.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '404':
          description: Group or user not found. The specified groupId or userId does not exist.
          content:
            application/json:
              schema:
                type: object
                description: "The schema of the error 404"
                properties:
                  error:
                    type: string
                    description: A message indicating that the group or user was not found.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Server error. An internal error occurred while adding the user to the group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

  /lGroup/{groupId}/members/{memberId}:
    delete:
      tags: ["group"]
      summary: Leave a group
      description: |-
        Allows a specific user to leave a group.
      operationId: leaveGroup
      parameters:
        - name: groupId
          in: path
          required: true
          description: "The code of the group"
          schema:
            type: string
            description: The unique identifier of the group the user is leaving.
            pattern: "^[a-zA-Z0-9 .,!?'-]+$"
            minLength: 3
            maxLength: 1000
        - name: memberId
          in: path
          required: true
          description: "The code of the member"
          schema:
            type: string
            description: The unique identifier of the member leaving the group.
            pattern: "^[a-zA-Z0-9 .,!?'-]+$"
            minLength: 3
            maxLength: 1000
      responses:
        '200':
          description: User successfully removed from the group.
          content:
            application/json:
              schema:
                type: object
                description: "The schema of removing a member from a group"
                required:
                  - success
                  - message
                properties:
                  success:
                    type: boolean
                    description: Indicates the operation was successful.
                    example: true
                  message:
                    type: string
                    description: A message confirming the user was removed from the group.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '400':
          description: Invalid data. The provided groupId or memberId is not valid.
          content:
            application/json:
              schema:
                type: object
                description: "The schema of the error 400"
                properties:
                  error:
                    type: string
                    description: A message describing the issue with the request.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '404':
          description: Group or member not found. The specified groupId or memberId does not exist.
          content:
            application/json:
              schema:
                type: object
                description: "The schema of the error 404"
                properties:
                  error:
                    type: string
                    description: A message indicating that the group or member was not found.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Server error. An internal error occurred while removing the user from the group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

  
  /sGroupName/{groupId}:
    patch:
      tags: ["group"]
      summary: Update the group name
      description: |-
        Users can update the name of a specific group.
      operationId: setGroupName
      parameters:
        - name: groupId
          in: path
          required: true
          description: "The code of the group"
          schema:
            type: string
            description: The unique identifier of the group whose name is being updated.
            pattern: "^[a-zA-Z0-9 .,!?'-]+$"
            minLength: 3
            maxLength: 1000
      requestBody:
        description: The new name for the group.
        required: true
        content:
          application/json-patch+json:
            schema:
              type: object
              required:
                - groupName
              description: "The schema of renaming a group"
              properties:
                groupName:
                  type: string
                  description: The new name for the group.
                  pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                  minLength: 3
                  maxLength: 1000
      responses:
        '200':
          description: Group name updated successfully.
          content:
            application/json:
              schema:
                type: object
                required:
                  - groupId
                  - groupName
                description: "The schema of renaming a group"
                properties:
                  groupId:
                    type: string
                    description: The unique identifier of the group.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
                  groupName:
                    type: string
                    description: The updated name of the group.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '400':
          description: Invalid group name or groupId provided.
          content:
            application/json:
              schema:
                type: object
                description: "The schema of the error 400"
                properties:
                  error:
                    type: string
                    description: A message indicating the group name or ID is invalid.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '404':
          description: Group not found.
          content:
            application/json:
              schema:
                type: object
                description: "The schema of the error 404"
                properties:
                  error:
                    type: string
                    description: A message indicating the specified group does not exist.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Internal server error occurred while updating the group name.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

  /sMyPhoto/{userId}:
    post:
      tags: ["user"]
      summary: Update or set user photo
      description: Allows the user to update or set their profile photo.
      operationId: setMyPhoto
      parameters:
        - name: userId
          in: path
          required: true
          description: "The code of the user"
          schema:
            type: string
            description: The unique identifier of the user.
            pattern: "^[a-zA-Z0-9 .,!?'-]+$"
            minLength: 3
            maxLength: 1000
      requestBody:
        description: The photo to be uploaded or updated.
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - photo
              description: "The schema of uploading or updating a photo"
              properties:
                photo:
                  type: string
                  format: binary
                  description: The image file to be uploaded as the user's profile photo.
                  pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                  minLength: 3
                  maxLength: 1000
      responses:
        '200':
          description: Profile photo updated successfully.
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                  - photoUrl
                description: "The schema of updating a photo"
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  photoUrl:
                    type: string
                    description: The URL or path of the updated photo.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '400':
          description: Invalid file upload or unsupported format.
          content:
            application/json:
              schema:
                type: object
                description: "The schema of the error 400"
                properties:
                  error:
                    type: string
                    description: A message indicating what went wrong with the file upload.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '415':
          description: Unsupported media type.
          content:
            application/json:
              schema:
                type: object
                description: "The schema of the error 415"
                properties:
                  error:
                    type: string
                    description: A message indicating the uploaded file type is not supported.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

  /sGroupPhoto/{groupId}:
    post:
      tags: ["group"]
      summary: Upload or update the group photo
      description: |-
        Allows the group admin to upload or update the photo for a specific group.
      operationId: setGroupPhoto
      parameters:
        - name: groupId
          in: path
          required: true
          description: "The code of the group"
          schema:
            type: string
            description: The unique identifier of the group.
            pattern: "^[a-zA-Z0-9 .,!?'-]+$"
            minLength: 3
            maxLength: 1000
      requestBody:
        description: Group photo file upload
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - photo
              description: "The schema of group photo updating"
              properties:
                photo:
                  type: string
                  format: binary
                  description: The image file to be uploaded as the group photo.
                  pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                  minLength: 3
                  maxLength: 1000
      responses:
        '201':
          description: Group photo uploaded successfully.
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                  - photoUrl
                description: "The schema of the group photo uploaded"
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  photoUrl:
                    type: string
                    description: The URL or path to the uploaded photo.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '400':
          description: Invalid file upload or unsupported format.
          content:
            application/json:
              schema:
                type: object
                description: "The schema of the error 400"
                properties:
                  error:
                    type: string
                    description: An error message describing the issue with the upload.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '403':
          description: Unauthorized - User does not have permission to update the group photo.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        '415':
          description: Unsupported media type.
          content:
            application/json:
              schema:
                type: object
                description: "The schema of the error 415"
                properties:
                  error:
                    type: string
                    description: A message indicating the uploaded file type is not supported.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'


  /permissions/user/{userId}:
    post:
      tags: ["user"]
      summary: Check user permissions
      description: |-
        Verifies if a user has the necessary permissions to perform a specific action.
      operationId: checkUserPermissions
      parameters:
        - name: userId
          in: path
          required: true
          description: "The code of the user"
          schema:
            type: string
            description: The unique identifier of the user.
            pattern: "^[a-zA-Z0-9 .,!?'-]+$"
            minLength: 3
            maxLength: 1000
      requestBody:
        description: The action for which permission needs to be checked.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              description: "The schema of the permission check"
              properties:
                action:
                  type: string
                  description: The action to be verified (e.g., "setGroupPhoto").
                  pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                  minLength: 3
                  maxLength: 1000
      responses:
        '200':
          description: Permission status verified successfully.
          content:
            application/json:
              schema:
                type: object
                required:
                  - allowed
                  - message
                description: "The schema of permission authorized"
                properties:
                  allowed:
                    type: boolean
                    description: Indicates if the user is authorized to perform the action.
                    example: true
                  message:
                    type: string
                    description: A message providing additional details about the permission status.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '403':
          description: Unauthorized action - user lacks the required permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        '400':
          description: Bad request - invalid input data.
          content:
            application/json:
              schema:
                type: object
                description: "The schema of the error 400"
                properties:
                  error:
                    type: string
                    description: Details about the invalid request data.
                    pattern: "^[a-zA-Z0-9 .,!?'-]+$"
                    minLength: 3
                    maxLength: 1000
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
