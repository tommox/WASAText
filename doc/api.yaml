openapi: 3.0.3 

info:
  title: WASAText
  description: |-
    This OpenAPI document describes how WASAText works.
  version: "1"

components:
  securitySchemes:
    bearerAuth: 
      type: http
      scheme: bearer
security:
  - bearerAuth: []

paths: 
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user 
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin 
      requestBody:
        description: User details 
        content:
          application/json: 
            schema:
              type: object 
              properties:
                name:
                  type: string 
                  example: Maria 
                  pattern: 'ˆ.*?$' 
                  minLength: 3 
                  maxLength: 16
        required: true 
      responses:
        '201':
          description: User log-in action successful 
          content:
            application/json: 
              schema:
                type: object 
                properties:
                  identifier:
                    type: string
                    example: "abcdef012345"
        '400':
          description: Invalid username length
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: "Invalid name length. Name must be between 3 and 16 characters."
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An internal server error occurred."

  /username/{userId}:
    put: 
      tags: ["user"]
      summary: Set the name of the user
      description: |-
        Allows users to update their username.
      operationId: setMyUserName
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          example: "userX"
      requestBody: 
        description: update username 
        content:
          application/json:
            schema:
              type: object
              properties:
                newUserName:
                  type: string
                  example: MariaSofia
                  pattern: 'ˆ.*?$' 
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '200':
          description: Username successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message: 
                    type: string
                    example: "Username successfully updated"
        '400':
          description: Invalid username format or length
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid username length. Username must be between 3 and 16 characters and may include letters, numbers, underscores, and hyphens."
        '401':
          description: Unauthorized action
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not authenticated."
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An internal server error occurred."
        
  /conversations:
    get:
      tags: ["conversation"]
      summary: Get my conversations
      description: |-
        Return all my conversations
      operationId: getMyConversations
      parameters:
        - name: sortBy
          in: query
          description: Sort conversations by a specified field (ex. date)
          required: false
          schema:
            type: string
            enum: [date]
            example: date
      responses:
        '200':
          description: Conversations successfully returned
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not authenticated."
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An internal server error occurred."

  /conversation/{conversationId}:
    get:
      tags: ["conversation"]
      summary: Get a conversation by its ID
      description: |-
        Return one specific conversation
      operationId: getConversation
      parameters:
      - name: conversationId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Conversations successfully returned
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    conversationId:
                      type: string
                      example: "conversationX"
                    title:
                      type: string
                      example: "Chat with Maria"
                    lastMessage:
                      type: string
                      example: "See you tomorrow!"
                    updatedAt:
                      type: string
                      format: date-time
                      example: "D05-11-2024T15:30:00"
                    status:
                      type: string
                      enum: ["read", "unread"]
                      example: "unread"
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not authenticated."
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An internal server error occurred."
              
  /sMessage:
    post:
      tags: ["message"]
      summary: Send a message
      description: |-
        Send a message to a specific recipient
      operationId: sendMessage
      requestBody:
        description: Message details
        content:
          application/json:
            schema:
              type: object
              properties:
                recipientId:
                  type: string
                  example: "Marco"
                messageContent:
                  type: string
                  example: "Hello! How are you?"
                timestamp:
                  type: string
                  format: date-time
                  example: "D05-11-2024T14:47:00"
        required: true
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  messageId:
                    type: string
                    example: "msgX"
                  status:
                    type: string
                    enum: ["unsent", "sent", "read"] 
                    example: "read"
        '500':
          description: Server error

  /fMessage/{messageId}:
    post:
      tags: ["message"]
      summary: Forward a message
      description: |-
        Forward a message to a specific recipient
      operationId: forwardMessage
      requestBody:
        description: Message details
        content:
          application/json:
            schema:
              type: object
              properties:
                recipientId:
                  type: string
                  example: "RecipientX"
                messageContent:
                  type: string
                  example: "It's sunny today"
                timestamp:
                  type: string
                  format: date-time
                  example: "D05-11-2024T17:11:00"
        required: true
      responses:
        '201':
          description: Message forwarded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  messageId:
                    type: string
                    example: "msgX"
                  status:
                    type: string
                    enum: ["unsent", "sent", "read"] 
                    example: "sent"
        '500':
          description: Server error

  /cMessage/{messageId}:
    post:
      tags: ["message"]
      summary: Comment a message
      description: Adds a reaction to a specific message.
      operationId: commentMessage
      parameters:
      - name: messageId
        in: path
        required: true
        schema:
          type: string
          example: "msgX"
      requestBody:
        description: Comment (reaction)
        content:
          application/json:
            schema:
              type: object
              properties:
                emoji:
                  type: string
                  example: "👍"
      responses:
        '201':
          description: Reaction added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  reactionId:
                    type: string
                    example: "reactX"
                  status:
                    type: string
                    example: "added"
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid reaction data."
        '500':
          description: Server error

  /uMessage/{messageId}:
    post:
      tags: ["message"]
      summary: Unomment a message
      description: Removes a reaction to a specific message.
      operationId: uncommentMessage
      parameters:
      - name: messageId
        in: path
        required: true
        schema:
          type: string
          example: "msgX"
      requestBody:
        description: Remove comment (reaction)
        content:
          application/json:
            schema:
              type: object
              properties:
                emoji:
                  type: string
                  example: ""
      responses:
        '201':
          description: Reaction removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  reactionId:
                    type: string
                    example: "reactX"
                  status:
                    type: string
                    example: ""
        '500':
          description: Server error

  /dMessage/{messageId}:
    delete:
      tags: ["message"]
      summary: Delete a message
      description: Deletes a specific message
      operationId: deleteMessage
      responses:
        '204': {description: Message deleted successfully}
        '404': {description: Message not found}
  
  /aGroup/{groupId}/{userId}:
    post:
      tags: ["group"]
      summary: Add to a group
      description: Add a specific person to a group
      operationId: addToGroup
      requestBody:
        description: User and group details
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: "userX"
                groupId:
                  type: string
                  example: "groupX"
        required: true
      responses:
        '201':
          description: User added to group successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "added"
                  groupId:
                    type: string
                    example: "groupX"
                  userId:
                    type: string
                    example: "userX"
        '400':
          description: Invalid user or group data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "userId or groupId is missing or invalid."
        '500':
          description: Server error

  /lGroup/{groupId}/members/{memberId}:
    delete:
      tags: ["group"]
      summary: Leave a group
      description: A specific user leave a group
      operationId: leaveGroup
      parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
          example: "groupX"
      - name: userId
        in: path
        required: true
        schema:
          type: string
          example: "userX"
      responses:
        '200': {description: User successfully removed from group}
        '500': {description: Server error}
  
  /sGroupName/{groupId}:
    patch:
      tags: ["group"]
      summary: Update the group name
      description: Allows the user to update the name of a specific group.
      operationId: setGroupName
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            example: "groupX"
      requestBody:
        description: New group name
        content:
          application/json:
            schema:
              type: object
              properties:
                groupName:
                  type: string
                  example: "WASAgroup"
                  minLength: 3
                  maxLength: 30
        required: true
      responses:
        '200':
          description: Group name updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  groupId:
                    type: string
                    example: "groupX"
                  groupName:
                    type: string
                    example: "WASAgroup"
        '400':
          description: Invalid group name or groupId
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Group name is invalid or too short."
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An internal server error occurred."
  
  /sMyPhoto/{userId}:
    post:
      tags: ["user"]
      summary: set Photo
      description: Allows the user to update or change his photo
      operationId: setMyPhoto
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            example: "userX"
      requestBody:
        description: add or update photo
        content:
          image/png:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
                  description: The image user will use as his photo
        required: false
      responses:
        '200':
          description: Profile photo updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "updated"
                  photoUrl:
                    type: string
                    example: "PhotoX.jpg"
        '400':
          description: Invalid file upload
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "File is missing or unsupported format."
        '500': {description: Server error}
    
  /sGroupPhoto/{groupId}:
    post:
      tags: ["group"]
      summary: Upload or update the group photo
      description: Allows the admin to set or update the photo of a specific group.
      operationId: setGroupPhoto
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            example: "groupX"
      requestBody:
        description: Group photo file upload
        content:
          image/png:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
                  description: The image that will be the group photo.
        required: false
      responses:
        '201':
          description: Group photo uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "uploaded"
                  photoUrl:
                    type: string
                    example: "PhotoX.jpg"
        '400':
          description: Invalid file upload
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "File is missing or unsupported format."
        '403':
          description: Unauthorized - User is not allowed to update group photo
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User does not have permission to update the group photo."
        '500': {description: Server error}

  /permissions/user/{userId}:
    post:
      tags: ["user"]
      summary: Check user permissions 
      description: Verifies if a user has the necessary permissions to perform an action.
      operationId: checkUserPermissions
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          example: "userX"
      requestBody:
        description: User ID and requested action
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: "userX"
                action:
                  type: string
                  example: "setGroupPhoto"
        required: true
      responses:
        '200':
          description: Permission status
          content:
            application/json:
              schema:
                type: object
                properties:
                  allowed:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User is authorized to perform this action."
        '403':
          description: Unauthorized action
          content:
            application/json:
              schema:
                type: object
                properties:
                  allowed:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "User is not authorized to change the group photo."
        '500': {description: Server error}

